<?php

namespace App\Filament\Resources\Facturas\Fa        ];
    }
    
    protected function getHeaderActions(): arrayges;

use App\Filament\Resources\Facturas\FacturasResource;
use App\Filament\Resources\Consultas\ConsultasResource;
use App\Models\{Consulta, FacturaDetalle, Descuento};
use Filament\Resources\Pages\CreateRecord;
use Filament\Actions;
use Illuminate\Validation\ValidationException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class CreateFacturas extends CreateRecord
{
    protected static string $resource = FacturasResource::class;

    public function mount(): void
    {
        parent::mount();
        
        // Obtener consulta_id de la URL
        $consultaId = request()->get('consulta_id');
        
        if ($consultaId) {
            $consulta = Consulta::find($consultaId);
            
            if ($consulta) {
                // Obtener servicios de la consulta para calcular totales
                $servicios = FacturaDetalle::where('consulta_id', $consultaId)
                    ->whereNull('factura_id')
                    ->get();
                
                // Calcular subtotal e impuestos
                $subtotal = $servicios->sum('subtotal');
                $impuestoTotal = $servicios->sum('impuesto_monto');
                $total = $servicios->sum('total_linea');
                
                // Obtener descuento si existe en sessionStorage (se maneja vía JavaScript)
                $descuentoTotal = 0;
                
                // Pre-llenar los campos del formulario
                $this->form->fill([
                    'consulta_id' => $consultaId,
                    'centro_medico_id' => Auth::user()->centro_id,
                    'subtotal' => $subtotal,
                    'impuesto_total' => $impuestoTotal,
                    'descuento_total' => $descuentoTotal,
                    'total' => $total,
                    'saldo_pendiente' => $total,
                    'fecha_emision' => now()->format('Y-m-d'),
                ]);
            }
        }
    }
    
    protected function getViewData(): array
    {
        $consultaId = request()->get('consulta_id');
        
        // Obtener totales desde sessionStorage si están disponibles
        $totalesStorage = session()->get('totales_factura', []);
        
        return [
            'consultaId' => $consultaId,
            'totalesStorage' => $totalesStorage,
        ];
    }
    
    protected function getHeaderWidgets(): array
    {
        return [];
    }
    
    protected function getFooterWidgets(): array
    {
        return [];
    }

    protected function getHeaderActions(): array
    {
        return [
            Actions\Action::make('regresar')
                ->label('Regresar a Servicios')
                ->icon('heroicon-o-arrow-left')
                ->color('gray')
                ->url(function () {
                    $consultaId = request()->get('consulta_id');
                    if ($consultaId) {
                        return ConsultasResource::getUrl('manage-servicios', ['record' => $consultaId]);
                    }
                    return ConsultasResource::getUrl('index');
                })
                ->button(),
        ];
    }
    
    protected function getViewData(): array
    {
        $consultaId = request()->get('consulta_id');
        
        // Obtener totales desde sessionStorage si están disponibles
        $totalesStorage = session()->get('totales_factura', []);
        
        return [
            'consultaId' => $consultaId,
            'totalesStorage' => $totalesStorage,
        ];
    }
    
    public function getExtraBodyAttributes(): array
    {
        return [
            'x-data' => json_encode([
                'init' => "this.initializeTotales()"
            ]),
            'x-init' => "
                function initializeTotales() {
                    // Solo ejecutar si hay datos en sessionStorage
                    const stored = JSON.parse(sessionStorage.getItem('totales_factura') || '{}');
                    if (Object.keys(stored).length > 0) {
                        // Actualizar campos con valores del storage
                        setTimeout(() => {
                            const subtotalField = document.querySelector('[data-field-wrapper] input[wire\\\\:model=\"data.subtotal\"]');
                            const totalField = document.querySelector('[data-field-wrapper] input[wire\\\\:model=\"data.total\"]');
                            const saldoField = document.querySelector('[data-field-wrapper] input[wire\\\\:model=\"data.saldo_pendiente\"]');
                            
                            if (subtotalField && stored.subtotal) {
                                subtotalField.value = stored.subtotal;
                                subtotalField.dispatchEvent(new Event('input'));
                            }
                            
                            if (totalField && stored.total) {
                                totalField.value = stored.total;
                                totalField.dispatchEvent(new Event('input'));
                            }
                            
                            if (saldoField && stored.total) {
                                saldoField.value = stored.total;
                                saldoField.dispatchEvent(new Event('input'));
                            }
                        }, 500);
                    }
                }
            "
        ];
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        Log::info('🚀 mutateFormDataBeforeCreate ejecutado', ['data' => $data]);
        
        // Obtener consulta desde URL si no está en los datos
        if (empty($data['consulta_id'])) {
            $data['consulta_id'] = request()->get('consulta_id');
        }

        // Obtener información de la consulta
        if (!empty($data['consulta_id'])) {
            $consulta = Consulta::with(['paciente', 'medico', 'servicios'])->find($data['consulta_id']);
            
            if ($consulta) {
                $data['paciente_id'] = $consulta->paciente_id;
                $data['medico_id'] = $consulta->medico_id;
                $data['cita_id'] = $consulta->cita_id;
                
                // Calcular totales
                $subtotal = $consulta->servicios->sum('precio');
                $descuentoTotal = 0;
                
                if (!empty($data['descuento_id'])) {
                    $descuento = Descuento::find($data['descuento_id']);
                    if ($descuento) {
                        $descuentoTotal = ($subtotal * $descuento->porcentaje) / 100;
                    }
                }
                
                $subtotalConDescuento = $subtotal - $descuentoTotal;
                $impuestoTotal = $subtotalConDescuento * 0.15;
                $total = $subtotalConDescuento + $impuestoTotal;
                
                $data['subtotal'] = $subtotal;
                $data['descuento_total'] = $descuentoTotal;
                $data['impuesto_total'] = $impuestoTotal;
                $data['total'] = $total;
                $data['fecha'] = now();
                $data['usuario_id'] = Auth::id();
                
                Log::info('✅ Datos calculados', [
                    'subtotal' => $subtotal,
                    'descuento_total' => $descuentoTotal,
                    'impuesto_total' => $impuestoTotal,
                    'total' => $total
                ]);
            }
        }

        return $data;
    }

    protected function afterCreate(): void
    {
        Log::info('🎯 afterCreate ejecutado', ['factura_id' => $this->record->id]);
        
        $record = $this->record;
        $consultaId = $record->consulta_id;

        if ($consultaId) {
            $consulta = Consulta::with('servicios')->find($consultaId);
            
            if ($consulta && $consulta->servicios->isNotEmpty()) {
                Log::info('📋 Creando detalles de factura', [
                    'consulta_id' => $consultaId,
                    'servicios_count' => $consulta->servicios->count()
                ]);
                
                // Crear detalles de factura
                foreach ($consulta->servicios as $servicio) {
                    FacturaDetalle::create([
                        'factura_id' => $record->id,
                        'servicio_id' => $servicio->id,
                        'cantidad' => 1,
                        'precio_unitario' => $servicio->precio,
                        'subtotal' => $servicio->precio,
                    ]);
                }
                
                Log::info('✅ Detalles de factura creados exitosamente');
            }
        }
    }

    protected function beforeCreate(): void
    {
        Log::info('🔍 beforeCreate ejecutado', ['data_keys' => array_keys($this->data)]);
    }
    
    public function recalcularTotales()
    {
        $consultaId = request()->get('consulta_id') ?? $this->data['consulta_id'] ?? null;
        
        if ($consultaId) {
            // Obtener servicios actualizados de la consulta
            $servicios = FacturaDetalle::where('consulta_id', $consultaId)
                ->whereNull('factura_id')
                ->get();
            
            // Recalcular totales
            $subtotal = $servicios->sum('subtotal');
            $impuestoTotal = $servicios->sum('impuesto_monto');
            $total = $servicios->sum('total_linea');
            
            // Actualizar los datos del formulario
            $this->data['subtotal'] = $subtotal;
            $this->data['impuesto_total'] = $impuestoTotal;
            $this->data['total'] = $total;
            $this->data['saldo_pendiente'] = $total;
            
            // Asegurar que descuento_total esté inicializado
            if (!isset($this->data['descuento_total'])) {
                $this->data['descuento_total'] = 0;
            }
        }
    }

    protected function handleRecordCreation(array $data): \Illuminate\Database\Eloquent\Model
    {
        try {
            Log::info('💾 handleRecordCreation iniciado', ['data' => $data]);
            $record = parent::handleRecordCreation($data);
            Log::info('✅ Factura creada exitosamente', ['factura_id' => $record->id]);
            return $record;
        } catch (\Exception $e) {
            Log::error('❌ Error al crear factura', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            throw $e;
        }
    }
}
