<?php

namespace App\Filament\Resources\ContabilidadMedica\PagoHonorarioResource\Pages;

use App\Filament\Resources\ContabilidadMedica\PagoHonorarioResource;
use App\Models\ContabilidadMedica\LiquidacionHonorario;
use App\Models\ContabilidadMedica\PagoHonorario;
use App\Models\Centros_Medico;
use Filament\Actions;
use Filament\Forms;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Wizard;
use Filament\Forms\Components\Wizard\Step;
use Filament\Forms\Form;
use Filament\Resources\Pages\CreateRecord;
use Filament\Resources\Pages\CreateRecord\Concerns\HasWizard;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class CreatePagoHonorario extends CreateRecord
{
    use HasWizard;
    
    protected static string $resource = PagoHonorarioResource::class;
    
    // Capturar parámetros pasados por URL
    public ?int $liquidacion_id = null;
    public ?int $centro_id = null;
    
    // Configurar el wizards para que ocupe toda la pantalla
    protected int | string | array $columnSpan = 'full';
    
    public function mount(): void
    {
        parent::mount();
        
        // Si tenemos parámetros, configuramos los valores por defecto en el formulario
        $this->form->fill([
            'liquidacion_id' => $this->liquidacion_id,
            'centro_id' => $this->centro_id ?? (Auth::check() ? Auth::user()->centros_id : null),
        ]);
    }
    
    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Wizard::make([
                    Step::make('Selección de Liquidación')
                        ->icon('heroicon-o-document-text')
                        ->description('Seleccione la liquidación a pagar')
                        ->schema([
                            Select::make('liquidacion_id')
                                ->label('Liquidación')
                                ->options(function () {
                                    // Obtener liquidaciones pendientes o con pago parcial
                                    return LiquidacionHonorario::whereIn('estado', ['pendiente', 'parcial'])
                                        ->with('medico.persona')
                                        ->get()
                                        ->mapWithKeys(function ($liquidacion) {
                                            return [
                                                $liquidacion->id => "#{$liquidacion->id} - {$liquidacion->medico->persona->nombre_completo} - L. {$liquidacion->monto_total} - {$liquidacion->periodo_inicio} al {$liquidacion->periodo_fin}"
                                            ];
                                        });
                                })
                                ->required()
                                ->searchable()
                                ->preload()
                                ->live()
                                ->afterStateUpdated(function ($state, callable $set) {
                                    if ($state) {
                                        $liquidacion = LiquidacionHonorario::with('centro')->find($state);
                                        if ($liquidacion) {
                                            $set('centro_id', $liquidacion->centro_id);
                                            
                                            // Calcular monto pendiente
                                            $pagado = PagoHonorario::where('liquidacion_id', $state)
                                                ->sum('monto_pagado');
                                            $pendiente = $liquidacion->monto_total - $pagado;
                                            
                                            $set('monto_pendiente', $pendiente);
                                            $set('monto_pagado', $pendiente);
                                        }
                                    }
                                }),
                                
                            TextInput::make('monto_pendiente')
                                ->label('Monto Pendiente')
                                ->prefix('L')
                                ->disabled()
                                ->dehydrated(false),
                                
                            Select::make('centro_id')
                                ->label('Centro Médico')
                                ->relationship('centro', 'nombre_centro')
                                ->required()
                                ->searchable()
                                ->preload(),
                        ]),
                        
                    Step::make('Detalles del Pago')
                        ->icon('heroicon-o-banknotes')
                        ->description('Ingrese los detalles del pago')
                        ->schema([
                            DatePicker::make('fecha_pago')
                                ->label('Fecha de Pago')
                                ->required()
                                ->default(now())
                                ->native(false),
                                
                            TextInput::make('monto_pagado')
                                ->label('Monto a Pagar')
                                ->required()
                                ->numeric()
                                ->prefix('L')
                                ->placeholder('0.00')
                                ->live()
                                ->afterStateUpdated(function ($state, callable $set) {
                                    // Calcular retención de ISR (si aplica)
                                    $montoISR = 0;
                                    $porcentajeISR = 0;
                                    
                                    // Si el monto es mayor a 40,000, aplicar 12.5% de ISR (ejemplo)
                                    if ($state > 40000) {
                                        $porcentajeISR = 12.5;
                                        $montoISR = $state * ($porcentajeISR / 100);
                                    }
                                    // Si el monto es mayor a 15,000, aplicar 10% de ISR
                                    elseif ($state > 15000) {
                                        $porcentajeISR = 10;
                                        $montoISR = $state * ($porcentajeISR / 100);
                                    }
                                    
                                    $set('retencion_isr_pct', $porcentajeISR);
                                    $set('retencion_isr_monto', $montoISR);
                                }),
                                
                            Grid::make(2)
                                ->schema([
                                    TextInput::make('retencion_isr_pct')
                                        ->label('Retención ISR %')
                                        ->numeric()
                                        ->suffix('%')
                                        ->minValue(0)
                                        ->maxValue(100)
                                        ->live()
                                        ->afterStateUpdated(function ($state, callable $set, callable $get) {
                                            $montoPagado = floatval($get('monto_pagado') ?? 0);
                                            $montoISR = $montoPagado * ($state / 100);
                                            $set('retencion_isr_monto', number_format($montoISR, 2, '.', ''));
                                        }),

                                    TextInput::make('retencion_isr_monto')
                                        ->label('Monto Retención ISR')
                                        ->numeric()
                                        ->prefix('L')
                                        ->live()
                                        ->afterStateUpdated(function ($state, callable $set, callable $get) {
                                            $montoPagado = floatval($get('monto_pagado') ?? 0);
                                            if ($montoPagado > 0) {
                                                $porcentajeISR = ($state / $montoPagado) * 100;
                                                $set('retencion_isr_pct', number_format($porcentajeISR, 2, '.', ''));
                                            }
                                        }),
                                ]),
                                
                            Select::make('metodo_pago')
                                ->label('Método de Pago')
                                ->options([
                                    'efectivo' => 'Efectivo',
                                    'transferencia' => 'Transferencia',
                                    'cheque' => 'Cheque',
                                    'tarjeta' => 'Tarjeta',
                                    'otro' => 'Otro'
                                ])
                                ->required()
                                ->default('transferencia'),
                                
                            TextInput::make('referencia_bancaria')
                                ->label('Referencia')
                                ->placeholder('Número de cheque, referencia de transferencia, etc.')
                                ->maxLength(255),
                        ]),
                        
                    Step::make('Confirmación')
                        ->icon('heroicon-o-check-circle')
                        ->description('Confirme los detalles del pago')
                        ->schema([
                            Section::make('Resumen del Pago')
                                ->schema([
                                    Forms\Components\Placeholder::make('liquidacion_info')
                                        ->label('Liquidación')
                                        ->content(function (callable $get) {
                                            $liquidacionId = $get('liquidacion_id');
                                            if (!$liquidacionId) return 'No seleccionada';
                                            
                                            $liquidacion = LiquidacionHonorario::with('medico.persona')->find($liquidacionId);
                                            if (!$liquidacion) return 'No encontrada';
                                            
                                            return "#{$liquidacion->id} - {$liquidacion->medico->persona->nombre_completo}";
                                        }),
                                        
                                    Forms\Components\Placeholder::make('monto_info')
                                        ->label('Monto a Pagar')
                                        ->content(function (callable $get) {
                                            $monto = $get('monto_pagado');
                                            return 'L. ' . number_format($monto, 2);
                                        }),
                                        
                                    Forms\Components\Placeholder::make('retencion_info')
                                        ->label('Retención ISR')
                                        ->content(function (callable $get) {
                                            $porcentaje = $get('retencion_isr_pct');
                                            $monto = $get('retencion_isr_monto');
                                            return "{$porcentaje}% - L. " . number_format($monto, 2);
                                        }),
                                        
                                    Forms\Components\Placeholder::make('metodo_info')
                                        ->label('Método de Pago')
                                        ->content(function (callable $get) {
                                            $metodo = $get('metodo_pago');
                                            $referencia = $get('referencia_bancaria');
                                            return ucfirst($metodo) . ($referencia ? " - Ref: {$referencia}" : '');
                                        }),
                                ]),
                                
                            Textarea::make('observaciones')
                                ->label('Observaciones')
                                ->placeholder('Ingrese cualquier observación o nota adicional sobre este pago')
                                ->maxLength(65535)
                                ->columnSpanFull(),
                        ]),
                ])->columnSpanFull(),
            ])->columns(1);
    }
    
    protected function afterCreate(): void
    {
        // Actualizar el estado de la liquidación según corresponda
        $liquidacion = LiquidacionHonorario::find($this->record->liquidacion_id);
        if ($liquidacion) {
            $totalPagado = PagoHonorario::where('liquidacion_id', $liquidacion->id)
                ->sum('monto_pagado');
                
            if ($totalPagado >= $liquidacion->monto_total) {
                $liquidacion->estado = 'pagado';
            } else if ($totalPagado > 0) {
                $liquidacion->estado = 'parcial';
            }
            
            $liquidacion->save();
        }
    }
}
