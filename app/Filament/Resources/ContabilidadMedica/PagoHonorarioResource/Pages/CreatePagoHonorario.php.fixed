<?php

namespace App\Filament\Resources\ContabilidadMedica\PagoHonorarioResource\Pages;

use App\Filament\Resources\ContabilidadMedica\PagoHonorarioResource;
use App\Models\ContabilidadMedica\CargoMedico;
use App\Models\ContabilidadMedica\LiquidacionHonorario;
use App\Models\ContabilidadMedica\PagoHonorario;
use App\Models\Centros_Medico;
use App\Models\Medico;
use Filament\Forms;
use Filament\Forms\Components\Card;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Group;
use Filament\Forms\Components\Placeholder;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Resources\Pages\CreateRecord;
use Filament\Actions\Action;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class CreatePagoHonorario extends CreateRecord
{
    protected static string $resource = PagoHonorarioResource::class;
    
    // Capturar parámetros pasados por URL
    public ?int $liquidacion_id = null;
    public ?int $centro_id = null;
    public ?string $medico_id = null;
    public ?string $cargos_ids = null;
    
    // Título de la página
    protected static ?string $title = 'Pago Rápido de Honorarios';
    
    public function mount(): void
    {
        parent::mount();
        
        // Pre-configurar basado en los parámetros de URL
        $defaultValues = [
            'liquidacion_id' => $this->liquidacion_id,
            'centro_id' => $this->centro_id ?? (Auth::check() ? Auth::user()->centro_id : null),
            'fecha_pago' => now(),
            'metodo_pago' => 'transferencia',
            'retencion_isr_pct' => 0,
            'retencion_isr_monto' => 0,
        ];
        
        // Si tenemos un médico preseleccionado, pre-cargar su liquidación
        if ($this->medico_id) {
            $liquidacion = LiquidacionHonorario::where('medico_id', $this->medico_id)
                ->whereIn('estado', ['pendiente', 'parcial'])
                ->orderBy('created_at', 'desc')
                ->first();
                
            if ($liquidacion) {
                $defaultValues['liquidacion_id'] = $liquidacion->id;
                
                // Calcular monto pendiente
                $pagado = PagoHonorario::where('liquidacion_id', $liquidacion->id)
                    ->sum('monto_pagado');
                $pendiente = $liquidacion->monto_total - $pagado;
                
                $defaultValues['monto_pagado'] = $pendiente;
            }
        }
        
        // Si tenemos una liquidación preseleccionada, auto-completar sus datos
        if ($this->liquidacion_id) {
            $liquidacion = LiquidacionHonorario::find($this->liquidacion_id);
            if ($liquidacion) {
                // Calcular monto pendiente
                $pagado = PagoHonorario::where('liquidacion_id', $this->liquidacion_id)
                    ->sum('monto_pagado');
                $pendiente = $liquidacion->monto_total - $pagado;
                
                $defaultValues['monto_pagado'] = $pendiente;
                $defaultValues['centro_id'] = $liquidacion->centro_id;
            }
        }
        
        $this->form->fill($defaultValues);
    }
    
    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Card::make()
                    ->schema([
                        Section::make('Selección de Médico y Liquidación')
                            ->description('Seleccione el médico y la liquidación a pagar')
                            ->collapsible()
                            ->schema([
                                Select::make('medico_selector')
                                    ->label('Médico')
                                    ->options(function () {
                                        // Obtener solo médicos con liquidaciones pendientes
                                        return Medico::whereHas('liquidaciones', function ($query) {
                                            $query->whereIn('estado', ['pendiente', 'parcial']);
                                        })
                                        ->with('persona')
                                        ->get()
                                        ->mapWithKeys(function ($medico) {
                                            return [$medico->id => $medico->persona->nombre_completo];
                                        });
                                    })
                                    ->searchable()
                                    ->preload()
                                    ->live()
                                    ->afterStateUpdated(function ($state, callable $set) {
                                        if (!$state) return;
                                        
                                        // Buscar la liquidación más reciente para este médico
                                        $liquidacion = LiquidacionHonorario::where('medico_id', $state)
                                            ->whereIn('estado', ['pendiente', 'parcial'])
                                            ->orderBy('created_at', 'desc')
                                            ->first();
                                            
                                        if ($liquidacion) {
                                            $set('liquidacion_id', $liquidacion->id);
                                            $set('centro_id', $liquidacion->centro_id);
                                            
                                            // Calcular monto pendiente
                                            $pagado = PagoHonorario::where('liquidacion_id', $liquidacion->id)
                                                ->sum('monto_pagado');
                                            $pendiente = $liquidacion->monto_total - $pagado;
                                            
                                            $set('monto_pagado', $pendiente);
                                            
                                            // Calcular ISR automáticamente
                                            $this->calcularISR($pendiente, $set);
                                        }
                                    })
                                    ->dehydrated(false) // No guardar en la BD
                                    ->columnSpan(['lg' => 2]),
                                
                                Select::make('liquidacion_id')
                                    ->label('Liquidación')
                                    ->options(function () {
                                        // Obtener liquidaciones pendientes o con pago parcial
                                        return LiquidacionHonorario::whereIn('estado', ['pendiente', 'parcial'])
                                            ->with('medico.persona')
                                            ->get()
                                            ->mapWithKeys(function ($liquidacion) {
                                                return [
                                                    $liquidacion->id => "#{$liquidacion->id} - {$liquidacion->medico->persona->nombre_completo} - L. {$liquidacion->monto_total} - {$liquidacion->periodo_inicio} al {$liquidacion->periodo_fin}"
                                                ];
                                            });
                                    })
                                    ->required()
                                    ->searchable()
                                    ->preload()
                                    ->live()
                                    ->afterStateUpdated(function ($state, callable $set) {
                                        if (!$state) return;
                                        
                                        $liquidacion = LiquidacionHonorario::find($state);
                                        if ($liquidacion) {
                                            $set('centro_id', $liquidacion->centro_id);
                                            
                                            // Calcular monto pendiente
                                            $pagado = PagoHonorario::where('liquidacion_id', $state)
                                                ->sum('monto_pagado');
                                            $pendiente = $liquidacion->monto_total - $pagado;
                                            
                                            $set('monto_pagado', $pendiente);
                                            
                                            // Calcular ISR automáticamente
                                            $this->calcularISR($pendiente, $set);
                                        }
                                    })
                                    ->columnSpan(['lg' => 2]),
                            ]),
                            
                        Section::make('Detalles del Pago')
                            ->description('Información del pago a realizar')
                            ->schema([
                                Group::make([
                                    Grid::make(2)
                                        ->schema([
                                            TextInput::make('monto_pagado')
                                                ->label('Monto a Pagar')
                                                ->required()
                                                ->numeric()
                                                ->prefix('L')
                                                ->placeholder('0.00')
                                                ->live()
                                                ->afterStateUpdated(function ($state, callable $set) {
                                                    // Aplicar retención automática
                                                    $this->calcularISR($state, $set);
                                                }),
                                                
                                            DatePicker::make('fecha_pago')
                                                ->label('Fecha de Pago')
                                                ->required()
                                                ->default(now())
                                                ->native(false),
                                        ]),
                                        
                                    Grid::make(2)
                                        ->schema([
                                            Select::make('metodo_pago')
                                                ->label('Método de Pago')
                                                ->options([
                                                    'efectivo' => 'Efectivo',
                                                    'transferencia' => 'Transferencia',
                                                    'cheque' => 'Cheque',
                                                    'tarjeta' => 'Tarjeta',
                                                    'otro' => 'Otro'
                                                ])
                                                ->required()
                                                ->default('transferencia'),
                                                
                                            TextInput::make('referencia_bancaria')
                                                ->label('Referencia')
                                                ->placeholder('Número de cheque, referencia, etc.')
                                                ->maxLength(255),
                                        ]),
                                ])->columnSpan(['lg' => 2]),
                                
                                Group::make([
                                    Grid::make(1)
                                        ->schema([
                                            Section::make('Retenciones')
                                                ->schema([
                                                    Toggle::make('aplicar_isr')
                                                        ->label('Aplicar ISR')
                                                        ->default(true)
                                                        ->live()
                                                        ->afterStateUpdated(function ($state, callable $set, callable $get) {
                                                            if (!$state) {
                                                                $set('retencion_isr_pct', 0);
                                                                $set('retencion_isr_monto', 0);
                                                            } else {
                                                                // Re-calcular el ISR
                                                                $monto = floatval($get('monto_pagado'));
                                                                $this->calcularISR($monto, $set);
                                                            }
                                                        }),
                                                        
                                                    Grid::make(2)
                                                        ->schema([
                                                            TextInput::make('retencion_isr_pct')
                                                                ->label('ISR %')
                                                                ->numeric()
                                                                ->suffix('%')
                                                                ->minValue(0)
                                                                ->maxValue(100)
                                                                ->live()
                                                                ->disabled(fn (Get $get) => !$get('aplicar_isr'))
                                                                ->afterStateUpdated(function ($state, callable $set, callable $get) {
                                                                    if (!$get('aplicar_isr')) return;
                                                                    
                                                                    $montoPagado = floatval($get('monto_pagado') ?? 0);
                                                                    $montoISR = $montoPagado * ($state / 100);
                                                                    $set('retencion_isr_monto', number_format($montoISR, 2, '.', ''));
                                                                }),

                                                            TextInput::make('retencion_isr_monto')
                                                                ->label('Monto ISR')
                                                                ->numeric()
                                                                ->prefix('L')
                                                                ->disabled(fn (Get $get) => !$get('aplicar_isr'))
                                                                ->live()
                                                                ->afterStateUpdated(function ($state, callable $set, callable $get) {
                                                                    if (!$get('aplicar_isr')) return;
                                                                    
                                                                    $montoPagado = floatval($get('monto_pagado') ?? 0);
                                                                    if ($montoPagado > 0) {
                                                                        $porcentajeISR = ($state / $montoPagado) * 100;
                                                                        $set('retencion_isr_pct', number_format($porcentajeISR, 2, '.', ''));
                                                                    }
                                                                }),
                                                        ]),
                                                ]),
                                                
                                            Section::make('Resumen')
                                                ->schema([
                                                    Placeholder::make('monto_bruto')
                                                        ->label('Monto Bruto')
                                                        ->content(function (Get $get) {
                                                            return 'L. ' . number_format($get('monto_pagado') ?? 0, 2);
                                                        }),
                                                        
                                                    Placeholder::make('total_retenciones')
                                                        ->label('Total Retenciones')
                                                        ->content(function (Get $get) {
                                                            $montoISR = floatval($get('retencion_isr_monto') ?? 0);
                                                            return 'L. ' . number_format($montoISR, 2);
                                                        }),
                                                        
                                                    Placeholder::make('monto_neto')
                                                        ->label('Monto Neto a Pagar')
                                                        ->content(function (Get $get) {
                                                            $montoBruto = floatval($get('monto_pagado') ?? 0);
                                                            $montoISR = floatval($get('retencion_isr_monto') ?? 0);
                                                            $montoNeto = $montoBruto - $montoISR;
                                                            return 'L. ' . number_format($montoNeto, 2);
                                                        })
                                                        ->extraAttributes(['class' => 'text-primary-600 font-bold text-xl']),
                                                ]),
                                        ]),
                                ])->columnSpan(['lg' => 2]),
                                
                                Select::make('centro_id')
                                    ->label('Centro Médico')
                                    ->relationship('centro', 'nombre_centro')
                                    ->required()
                                    ->searchable()
                                    ->preload(),
                                    
                                Textarea::make('observaciones')
                                    ->label('Observaciones')
                                    ->placeholder('Ingrese cualquier observación o nota adicional sobre este pago')
                                    ->maxLength(65535)
                                    ->columnSpanFull(),
                            ])->columns(4),
                    ]),
            ]);
    }
    
    // Botones de acción para la página
    protected function getHeaderActions(): array
    {
        return [
            Action::make('registrarOtroPago')
                ->label('Registrar otro pago después')
                ->color('gray')
                ->action(function () {
                    // Guardar y redireccionar a un nuevo formulario
                    $this->save(true, true);
                }),
                
            Action::make('generarRecibo')
                ->label('Generar recibo')
                ->color('warning')
                ->action(function () {
                    // Guardar y generar recibo
                    $record = $this->save(true);
                    
                    // Redireccionar a la página de recibo
                    return redirect()->route('filament.admin.resources.contabilidad-medica.pago-honorarios.generate-receipt', [
                        'record' => $record->id
                    ]);
                }),
        ];
    }
    
    // Método para calcular automáticamente el ISR basado en el monto
    protected function calcularISR($monto, callable $set): void
    {
        $montoISR = 0;
        $porcentajeISR = 0;
        
        // Si el monto es mayor a 40,000, aplicar 12.5% de ISR (ejemplo)
        if ($monto > 40000) {
            $porcentajeISR = 12.5;
            $montoISR = $monto * ($porcentajeISR / 100);
        }
        // Si el monto es mayor a 15,000, aplicar 10% de ISR
        elseif ($monto > 15000) {
            $porcentajeISR = 10;
            $montoISR = $monto * ($porcentajeISR / 100);
        }
        
        $set('retencion_isr_pct', $porcentajeISR);
        $set('retencion_isr_monto', $montoISR);
    }
    
    protected function afterCreate(): void
    {
        // Actualizar el estado de la liquidación según corresponda
        $liquidacion = LiquidacionHonorario::find($this->record->liquidacion_id);
        if ($liquidacion) {
            // Calcular monto total pagado para esta liquidación
            $totalPagado = PagoHonorario::where('liquidacion_id', $liquidacion->id)
                ->sum('monto_pagado');
                
            // Actualizar automáticamente el estado
            if ($totalPagado >= $liquidacion->monto_total) {
                $liquidacion->estado = 'pagado';
                
                // Notificar la liquidación completada
                $this->dispatch('notify', [
                    'title' => '¡Liquidación completada!',
                    'message' => "La liquidación #{$liquidacion->id} ha sido pagada en su totalidad.",
                    'icon' => 'success',
                ]);
            } else if ($totalPagado > 0) {
                $liquidacion->estado = 'parcial';
                
                // Mostrar cuánto falta por pagar
                $faltante = $liquidacion->monto_total - $totalPagado;
                $this->dispatch('notify', [
                    'title' => 'Pago parcial registrado',
                    'message' => "Falta por pagar: L. " . number_format($faltante, 2),
                    'icon' => 'warning',
                ]);
            }
            
            $liquidacion->save();
        }
    }
    
    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }
    
    // Método para generar la URL que lleva directamente al pago
    public static function getUrlParaPagoRapido(int $liquidacionId): string
    {
        return route('filament.admin.resources.contabilidad-medica.pago-honorarios.create', [
            'liquidacion_id' => $liquidacionId
        ]);
    }
}
